@page "/cars"
@using CarShowroom.Client.Services.Interfaces
@using CarShowroom.Client.DTOs
@using Microsoft.AspNetCore.Authorization
@inject ICarService CarService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3>Cars</h3>

@if (cars == null)
{
    <span><em>Loading...</em></span>
}
else
{

    <div class="col">
        <button class="btn btn-light" @onclick="@(()=>NavigationManager.NavigateTo("/createcar"))">Create car</button>
    </div>
    <div>
        <input @oninput="@((args)=>filter=args.Value.ToString().ToLower())" placeholder="Search..."/>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Model</th>
                <th>Year</th>
                <th>Mileage</th>
                <th>Color</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in filteredCars)
            {
                <tr>
                    <td>
                        <button class="btn btn-link" @onclick="@(()=>NavigationManager.NavigateTo($"/car/{car.Id}"))">
                            @car.Make @car.Model
                        </button>
                    </td>
                    <td>@car.Year</td>
                    <td>@car.Mileage</td>
                    <td>@car.Color</td>
                </tr>
            }

        </tbody>
    </table>
}


@code {
    IEnumerable<CarDTO> cars;
    string filter = String.Empty;
    public IEnumerable<CarDTO> filteredCars => cars
                                                .Where(car => $"{car.Make} {car.Model} {car.Year}".ToLower().Contains(filter));

    protected override async Task OnInitializedAsync()
    {
        cars = await CarService.GetCars();
    }
}
