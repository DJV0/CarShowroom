@page "/employees"
@using CarShowroom.Client.DTOs
@using CarShowroom.Client.Services.Interfaces
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin,Manager")]

<h3>Employees</h3>
@if (employees == null)
{
    <span><em>Loading...</em></span>
}
else
{
    <div>
        <button class="btn btn-light" @onclick="@(()=>NavigationManager.NavigateTo("/createemployee"))">Create employee</button>
    </div>
    <div>
        <input @oninput="@((args)=>filter=args.Value.ToString().ToLower())" placeholder="Search..." />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Phone</th>
                <th>Position</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in filteredEmployees)
            {
                <tr>
                    <td>
                        <button class="btn btn-link" @onclick="@(()=>NavigationManager.NavigateTo($"/employee/{employee.Id}"))">
                            @employee.Name @employee.LastName
                        </button>
                    </td>
                    <td>@employee.Phone</td>
                    <td>@employee.Position</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    IEnumerable<EmployeeDTO> employees;
    string filter = String.Empty;
    public IEnumerable<EmployeeDTO> filteredEmployees => employees
                                    .Where(e => e.Name.ToLower().Contains(filter) || e.LastName.ToLower().Contains(filter));

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployees();
    }
}
