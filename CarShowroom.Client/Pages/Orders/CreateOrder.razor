@page "/createorder"
@using CarShowroom.Client.Services.Interfaces
@using CarShowroom.Client.DTOs
@inject IOrderService OrderService
@inject IEmployeeService EmployeeService
@inject IPartService PartService
@inject ICarService CarService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin,Manager")]

<h3>Create new order</h3>
@if (employees == null || parts == null || cars == null)
{
    <span><em>Loading...</em></span>
}
else
{
<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="beginningofwork" class="form-label">Start</label>
        <InputDate id="beginningofwork" class="form-control" @bind-Value="@order.BeginningOfWork"></InputDate>
        <ValidationMessage For="@(() => order.BeginningOfWork)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="endingofwork" class="form-label">End</label>
        <InputDate id="endingofwork" class="form-control" @bind-Value="@order.EndingOfWork"></InputDate>
        <ValidationMessage For="@(() => order.EndingOfWork)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="cars" class="form-label">Car</label>
        <input class="form-control" list="carList" id="cars" @onchange="@((args) => AddCar(args.Value.ToString()))" placeholder="Type to search...">
        <datalist id="carList">
            @foreach (var car in cars)
            {
                <option value="@car.Make @car.Model @car.Year"></option>
            }
        </datalist>
        <ValidationMessage For="@(() => order.CarId)"></ValidationMessage>
    </div>
    <div class="form-group">
        <h4>Employees</h4>
        <div class="btn-group">
            @if (order.Employees != null)
            {
                @foreach (var employee in order.Employees)
                {
                    <a class="btn btn-block" @onclick="@(() => order.Employees.Remove(order.Employees.First(e => e.Id == employee.Id)))">
                        @employee.Name @employee.LastName
                    </a>
                }
            }

        </div>
        <div class="input-group mb-3">
            <input id="employeeInput" class="form-control" type="text" list="Employees"
                   @oninput="@((args) => inputEmployee = args.Value.ToString().ToLower())" placeholder="Type to search..." aria-describedby="button-add" />
            <a class="btn btn-outline-primary" id="button-add" @onclick="@(() => AddEmployee())">Add</a>
            <datalist class="col-4" id="Employees">
                @foreach (var employee in filteredEmployees)
                {
                    <option value="@employee.Name @employee.LastName"></option>

                }
            </datalist>
        </div>
    </div>
    <div class="form-group">
        <h4>Parts</h4>
        <div class="btn-group">
            @if (order.Parts != null)
            {
                @foreach (var part in order.Parts)
                {
                    <a class="btn btn-block" @onclick="@(() => order.Parts.Remove(order.Parts.First(p => p.Id == part.Id)))">
                        @part.Name
                    </a>
                }
            }

        </div>
        <div class="input-group mb-3">
            <input id="partInput" class="form-control" type="text" list="Parts"
                   @oninput="@((args) => inputPart = args.Value.ToString().ToLower())" placeholder="Type to search..." aria-describedby="button-add" />
            <a class="btn btn-outline-primary" id="button-add" @onclick="@(() => AddPart())">Add</a>
            <datalist class="col-4" id="Parts">
                @foreach (var part in filteredParts)
                {
                    <option value="@part.Name">@part.SerialNumber</option>

                }
            </datalist>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>
}

@code {
    OrderDTO order = new OrderDTO();
    IEnumerable<EmployeeDTO> employees;
    IEnumerable<PartDTO> parts;
    IEnumerable<CarDTO> cars;
    string inputCar = String.Empty;
    string inputEmployee = String.Empty;
    string inputPart = String.Empty;
    public IEnumerable<EmployeeDTO> filteredEmployees => employees
        .Where(e => e.Name.ToLower().Contains(inputEmployee) || e.LastName.ToLower().Contains(inputEmployee));
    public IEnumerable<PartDTO> filteredParts => parts
        .Where(p => p.Name.ToLower().Contains(inputPart) || p.SerialNumber.ToLower().Contains(inputPart));

    protected override async Task OnInitializedAsync()
    {
        order.BeginningOfWork = DateTime.Now;
        order.EndingOfWork = DateTime.Now;
        cars = (await CarService.GetCars()).Where(c => c.ClientId != null);
        employees = await EmployeeService.GetEmployees();
        parts = await PartService.GetParts();
        order.Employees = new List<EmployeeDTO>();
        order.Parts = new List<PartDTO>();
    }


    async Task HandleValidSubmit()
    {
        var result = await OrderService.CreateOrder(order);
        if (result) NavigationManager.NavigateTo("/orders");
    }

    void AddCar(string input)
    {
        var selectedCar = cars.FirstOrDefault(c => $"{c.Make} {c.Model} {c.Year}" == input);
        if (selectedCar != null) order.CarId = selectedCar.Id;
    }

    void AddEmployee()
    {
        var selectedEmployee = employees.FirstOrDefault(e => $"{e.Name} {e.LastName}".ToLower() == inputEmployee);
        if (selectedEmployee != null && order.Employees.FirstOrDefault(e => e.Id == selectedEmployee.Id) == null)
            order.Employees.Add(selectedEmployee);
    }

    void AddPart()
    {
        var selectedPart = parts.FirstOrDefault(p => p.Name.ToLower() == inputPart);
        if (selectedPart != null && order.Parts.FirstOrDefault(p => p.Id == selectedPart.Id) == null)
            order.Parts.Add(selectedPart);
    }
}